#!/usr/bin/env python3

import argparse
import itertools
import numpy as np
import svgwrite

CANVASX = 1000
CANVASY = 1000
NUM_STRIPES = 9
BLOCKX = 10
BLOCKY = CANVASY / NUM_STRIPES // 2

def get_color(brightness):
    if brightness < 0 or brightness > 1:
        raise Exception('brightness must be in [0, 1]')
    return (95 * brightness ** 2, 95 * brightness ** 2, 30 + 70 * brightness ** 2, '%')

def get_stripe_start(i, num_stripes):
    return (0, i * CANVASY / num_stripes)

def draw_stripe(dwg, start, magnitudes):
    startx, starty = start
    brightness = [1 - m for m in magnitudes]
    numblocks = len(magnitudes)
    blockx = numblocks / BLOCKX
    for i in range(numblocks):
        dwg.add(dwg.rect(insert=(startx + i * BLOCKX, starty),
            size=(BLOCKX, BLOCKY), fill=svgwrite.rgb(*get_color(brightness[i]))))

HELP = '''
The file should be tab-separated data generated by the following query:

select repo, ref, dayofyear(created), count(*) from
(select events.`id`, `type`, `repo`, `actor`, `org`, `created`, `push_id`,
        `ref`, `head`, `before`, `size`, `distinct`
        from events join push_events on events.id = push_events.id) t
group by repo, ref, dayofyear(created);
'''

REPO = 0
BRANCH = 1
DAY = 2
COUNT = 3

MASTER = 'refs/heads/master'

class Repo:
    def __init__(self, id):
        self.branches = {MASTER: []}
        self.total_events_per_branch = {MASTER: 0}
        self.id = id
        self.ordered_branches = [MASTER]

    def add_push_group(self, branch, day, num_push_events):
        if branch not in self.branches:
            self.branches[branch] = []
            self.total_events_per_branch[branch] = 0
        self.branches[branch].append((day - 1, num_push_events))
        self.total_events_per_branch[branch] += num_push_events

    def calculate_branch_order(self):
        branches = [branch for branch in self.branches.keys() if branch != MASTER]
        branches.sort(key=lambda branch: self.total_events_per_branch[branch],
                reverse=True)
        self.ordered_branches.extend(branches)

def parse_file(filename):
    with open(filename) as f:
        for line in f:
            parts = line.strip().split('\t')
            parts[REPO] = int(parts[REPO])
            parts[DAY] = int(parts[DAY])
            parts[COUNT] = int(parts[COUNT])
            yield parts

def aggregate_branch_events(branch_events, branch_group_size=10,
        max_result_size=None):
    result_size = len(branch_events) // branch_group_size
    if max_result_size is not None and max_result_size < result_size:
        result_size = max_result_size
    ret = []
    for i in range(result_size):
        ret.append(sum(branch_events[
            i * branch_group_size:(i + 1) * branch_group_size]) /
            branch_group_size)
    return ret

def main(filename):
    repos = {}
    for data in parse_file(filename):
        if data[REPO] not in repos:
            repos[data[REPO]] = Repo(data[REPO])
        repos[data[REPO]].add_push_group(data[BRANCH], data[DAY], data[COUNT])
    num_branches = 0
    for repo in repos.values():
        repo.calculate_branch_order()
        num_branches = max(num_branches, len(repo.branches))
    #pushes_per_day = [[0 for _ in range(num_branches)] for _ in range(90)]
    pushes_per_day = np.zeros((num_branches, 90))
    for repo in repos.values():
        for i,branch in enumerate(repo.ordered_branches):
            for day, count in repo.branches[branch]:
                pushes_per_day[i][day] += count
    for branch in pushes_per_day:
        print(' '.join(map(str, branch)))
    max_event_count = pushes_per_day.max()
    dwg = svgwrite.Drawing('file.svg', profile='tiny', size=(CANVASX, CANVASY))
    for i in range(NUM_STRIPES):
        draw_stripe(dwg, get_stripe_start(i, NUM_STRIPES),
                list(map(lambda x: x / max_event_count, pushes_per_day[i])))
    dwg.save()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', type=str, required=True, help=HELP)
    args = parser.parse_args()
    main(args.file)
